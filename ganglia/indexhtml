<!DOCTYPE html>
<html>

<head>
<meta http-equiv=Content-Type content="text/html;charset=utf-8">
<title>正文</title>
<link rel="stylesheet" href="styles/default.css" />
<script src="highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>

<body>

<h1 class="notInCatalogue">Ganglia使用说明</h1>

<h2>一、Ganglia的安装</h2>

<h3>1.1 使用apt-get方式安装</h3>
<p>
安装ganglia之前需要先安装apache与PHP。使用apt-get方式安装时，运行如下代码命令：
<pre><code>
sudo apt-get install apache2 php5 ganglia*

</code></pre>						
安装之后，启动gmetad与gmond分别使用如下命令：
<pre><code>
sudo service gmetad start
sudo service ganglia-monitor start

</code></pre>
为方便重启ganglia与apache，可以编写如下shell脚本：
<pre><code>
#!/bin/sh
sudo service gmetad restart
sudo service ganglia-monitor restart
sudo service /etc/init.d/apache2 restart

</code></pre>
</p>

<h3>1.2 使用编译安装</h3>
<p>
ganglia安装包的下载地址为：<a target="_blank" href="http://sourceforge.net/projects/ganglia/files/ganglia%20monitoring%20core/">http://sourceforge.net/projects/ganglia/files/ganglia%20monitoring%20core/</a>。<br>
在安装ganglia之前需要使用如下命令安装依赖包：
<pre><code>
sudo apt-get install libapr1-dev

</code></pre>
另外，还需要下载并安装confuse-2.7.tar.gz。
</p>

<h3>1.3 检查gemtad与gmond是否正常运行</h3>
检查gmetad是否正常运行使用如下命令：
<pre><code>
telnet localhost 8651     # 8651是gmetad默认的端口号

</code></pre>
如果gmetad正常运行，则会输出XML。<br>
检查gmond使用如下命令：
<pre><code>
telnet localhost 8649    # 8649是gmond的默认端口号

</code></pre>
</p>

<h3>1.4 安装gweb</h3>
<p>
到gweb的下载地址<a href="http://sourceforge.net/projects/ganglia/files/ganglia-web/" target="_blank">http://sourceforge.net/projects/ganglia/files/ganglia-web/</a>下载gweb的安装包。下载gweb安装包之后解压，然后切换到gweb安装包目录下，修改Makefile中的DESTDIR参数，指向apache文件目录下要安装的gweb目录。例如，apache默认的文件目录为/var/www，可以将DESTDIR设置为/var/www/ganglia。修改好DESTDIR之后，使用如下命令安装gweb：
<pre><code>
sudo make; sudo make install

</code></pre>
安装好gweb之后，访问地址为<a href="http://localhost/ganglia" target="_blank">http://localhost/ganglia</a>。
</p>

<h3>1.5 几个关键的路径</h3>
<p>
apache配置文件：/etc/apache2/httpd.conf<br>
apache启动文件：/etc/init.d/apache2（apache开机自动启动，重启apache使用命令/etc/init.d/apache2 restart）<br>
apache网站根目录：/var/www<br>
<br>
gmetad配置文件：/etc/ganglia/gmetad.conf<br>
gmond配置文件：/etc/ganglia/gmond.conf<br>
<br>
ganglia的rrd文件目录：/var/lib/ganglia/rrds<br>
ganglia扩展模块配置路径：/usr/lib/ganglia<br>
<br>
gweb首页视图配置文件/var/lib/ganglia/conf/default.json<br>
gweb的views选项卡的视图配置路径：/var/lib/ganglia/conf（当打开gweb的views选项卡时，程序将读取该目录下文件名为view_*.json的文件）
</p>

<h2>二、gweb的配置与开发</h2>
<h3>2.1 Main选项卡视图配置</h3>
Main选项卡中显示的视图是可以配置，配置方式有两种，分别是全局配置与局部配置。全局配置是指该配置可以应用到所有集群中，与之相对应的是局部视图配置，局部配置只应用于特定的集群。
<h4>2.1.1 全局配置</h4>
<p>
全局配置的配置文件为/var/lib/ganglia/conf/default.json。default.json的默认设置如下：
<pre><code>
{
  "included_reports": ["load_report", "mem_report", "cpu_report", "network_report"]
}

</code></pre>
include_reports参数所定义的视图将显示在Main选项卡中。当打开gweb的Main选项卡时，程序会读取default.json文件，如果included_reports的值包含{$report_name}_report，则程序会搜索gweb的PHP程序目录graph.d。<br>
如果graph.d下有{$report_name}_report.php文件，则会调用{$report_name}_report.php文件中的graph_{$report_name}_report函数，执行该函数中定义的逻辑，并返回对应的图片。<br>
如果graph.d下没有{$report}_report.php文件，程序则会搜索{$report_name}_report.json文件，如果找到该文件，则根据该文件定义的逻辑生成对应的图片。如果找到不{$report_name}_report.json文件，则程序会输出空图片。<br>
因此，如果要在default.json中的included_reports添加{$report_name}_report值，则gweb的PHP目录下必须存在graph.d/{$report_name}_report.php文件或graph.d/{$report_name}_report.json文件。<br>
</p>

<h4>2.1.2 局部配置</h4>
<p>
如果要为某个集群配置专用于该集群的视图，可以在/var/lib/ganglia/conf目录下添加cluster_{$cluster_name}.json文件，其格式与default.json格式完成一致。<br>
例如，要为名为MyCluster的集群配置视图，则可添加文件cluster_MyCluster.json。cluster_MyCluster.json中的逻辑将只应用于MyCluster集群，不会被应用于其他集群。
</p>

<h4>2.1.3 排除配置</h4>
<p>
上文提到的视图配置文件还可以设置excluded_reports参数，该参数可以将某个视图设置为不显示。<br>
举个例子，假设某个集群名为MyCluster，default.json的配置如下：
<pre><code>
{
  "included_reports": ["load_report", "mem_report", "cpu_report", "network_report"],
  "excluded_reports": ["packet_report"]
}

</code></pre>
由于default.json中的excluded_reports添加了packet_report，因此即使default.json或cluster_MyCluster.json中的included_reports中添加了packet_report，Main选项卡中也不会显示packet_report对应的视图。<br>
同理，如果在cluster_{$cluster_name}.json文件的excluded_reports参数中添加了{$report_name}_report，则{$report_name}_report不会在{$cluster_name}集群的监控视图中出现。
</p>

<h4>2.1.4 相关源码分析</h4>
<p>
程序读取json配置文件的代码主要在gweb中的cluster_view.php文件中，相关的代码片断如下：
<pre><code>
$default_reports = array("included_reports" => array(), "excluded_reports" => array());

/* 先判断default.json文件是否存在，如果存在当解析default.json中的配置数据，并添加到$default_reports数组中 */
if (is_file($conf['conf_dir'] . "/default.json")) {
  $default_reports = array_merge(
    $default_reports,
    json_decode(file_get_contents($conf['conf_dir'] . "/default.json"), TRUE));
}

/* $cluster_file是应用于特定集群的json文件的路经 */
$cluster_file = $conf['conf_dir'] . 
  "/cluster_" . 
  str_replace(" ", "_", $clustername) . 
  ".json";

$override_reports = array("included_reports" => array(), "excluded_reports" => array());
/* 先判断应用于特定集群的json文件是否存在，如果存在，则解析其中的配置数据，并将配置数据添加到$override_reports数组中 */
if (is_file($cluster_file)) {
  $override_reports = array_merge($override_reports, 
    json_decode(file_get_contents($cluster_file), TRUE));
}

$reports["included_reports"] = 
  array_merge($default_reports["included_reports"],$override_reports["included_reports"]);
$reports["excluded_reports"] = 
  array_merge($default_reports["excluded_reports"],$override_reports["excluded_reports"]);

...

/* 对于included_reports中定义的监控视图，如果该没被列为excluded_reports，则被添加到$optional_reports变量中，并且最终将会被输出 */
foreach ($reports["included_reports"] as $index => $report_name ) {
  if (! in_array( $report_name, $reports["excluded_reports"])) {
    $optional_reports .= "&lt;A HREF=\"./graph_all_periods.php?$graph_args&amp;amp;g=" . $report_name . 
      "&amp;amp;z=large&amp;amp;c=$cluster_url\">
      &lt;IMG BORDER=0 style=\"padding:2px;\" $additional_cluster_img_html_args title=\"$cluster_url\" 
      SRC=\"./graph.php?$graph_args&amp;amp;g=" . $report_name ."&amp;amp;z=medium&amp;amp;c=$cluster_url\">&lt;/A>";
  }
}

</code></pre>
</p>

</body>
</html>
